package com.example.androidphonestatuscompose
import android.Manifest
import android.annotation.SuppressLint
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.ApplicationInfo
import android.content.pm.PackageManager
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.os.BatteryManager
import android.os.Build
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.annotation.RequiresPermission
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue // If using mutableStateOf for single items
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.androidphonestatuscompose.PhoneStatusScreen
import com.example.androidphonestatuscompose.StatusItem
import com.example.androidphonestatuscompose.ui.theme.AndroidPhoneStatusComposeTheme // Your app's theme

class MainActivity : ComponentActivity() {

    // Observable list for Jetpack Compose
    private val statusItemsState = mutableStateListOf<StatusItem>()

    private val batteryReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            if (intent?.action == Intent.ACTION_BATTERY_CHANGED) {
                val level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1)
                val scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1)
                val batteryPct = if (level != -1 && scale != -1) {
                    (level / scale.toFloat() * 100).toInt()
                } else {
                    -1
                }
                val status = intent.getIntExtra(BatteryManager.EXTRA_STATUS, -1)
                val chargingStatus = when (status) {
                    BatteryManager.BATTERY_STATUS_CHARGING -> "Charging"
                    BatteryManager.BATTERY_STATUS_DISCHARGING -> "Discharging"
                    BatteryManager.BATTERY_STATUS_NOT_CHARGING -> "Not Charging"
                    BatteryManager.BATTERY_STATUS_FULL -> "Full"
                    else -> "Unknown"
                }
                val summary = if (batteryPct != -1) "$batteryPct%" else "N/A"
                val detail = "Status: $chargingStatus\nLevel: $batteryPct%"

                updateStatusItem("battery", summary, detail)
            }
        }
    }

    @RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            // Apply your app's theme (generated by Android Studio)
            AndroidPhoneStatusComposeTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    PhoneStatusScreen(
                        statusItems = statusItemsState,
                        onItemClick = { clickedItem ->
                            // Find the item and toggle its expanded state
                            val index = statusItemsState.indexOfFirst { it.id == clickedItem.id }
                            if (index != -1) {
                                val item = statusItemsState[index]
                                statusItemsState[index] = item.copy(isExpanded = !item.isExpanded)
                            }
                        }
                    )
                }
            }
        }
        loadInitialStatusData() // Load initial data
    }

    @RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE)
    override fun onResume() {
        super.onResume()
        registerReceiver(batteryReceiver, IntentFilter(Intent.ACTION_BATTERY_CHANGED))
        updateNetworkStatusData() // Refresh network status
    }

    override fun onPause() {
        super.onPause()
        unregisterReceiver(batteryReceiver)
    }

    @RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE)
    private fun loadInitialStatusData() {
        statusItemsState.clear()
        addDeviceInfo()
        addBatteryInfo() // Will be updated by receiver
        addNetworkStatus()
        addInstalledApplicationsInfo()
    }

    private fun updateStatusItem(id: String, newSummary: String, newDetail: String? = null) {
        val index = statusItemsState.indexOfFirst { it.id == id }
        if (index != -1) {
            val currentItem = statusItemsState[index]
            statusItemsState[index] = currentItem.copy(
                summaryText = newSummary,
                detailText = newDetail ?: currentItem.detailText // Keep old detail if newDetail is null
            )
        }
    }
    private fun updateStatusItemDetail(id: String, newDetail: String) {
        val index = statusItemsState.indexOfFirst { it.id == id }
        if (index != -1) {
            val currentItem = statusItemsState[index]
            statusItemsState[index] = currentItem.copy(detailText = newDetail)
        }
    }


    // --- Data Fetching Methods (similar to previous guide, but update statusItemsState) ---

    private fun addDeviceInfo() {
        val model = Build.MODEL
        val manufacturer = Build.MANUFACTURER
        val androidVersion = Build.VERSION.RELEASE
        val apiLevel = Build.VERSION.SDK_INT
        val summary = "Model: $model"
        val detail = "Manufacturer: $manufacturer\nAndroid Version: $androidVersion (API $apiLevel)"
        statusItemsState.add(StatusItem("device", "Device Info", summary, detail))
    }

    private fun addBatteryInfo() {
        statusItemsState.add(StatusItem("battery", "Battery Info", "Loading...", "Loading battery details..."))
        // Trigger initial read for battery
        val batteryStatusIntent: Intent? = registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))
        if (batteryStatusIntent != null) {
            batteryReceiver.onReceive(this, batteryStatusIntent)
        }
    }

    @RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE)
    private fun updateNetworkStatusData() { // Renamed to avoid confusion with addNetworkStatus
        val connectivityManager = getSystemService(CONNECTIVITY_SERVICE) as ConnectivityManager
        val network = connectivityManager.activeNetwork
        val capabilities = connectivityManager.getNetworkCapabilities(network)
        var summary = "Disconnected"
        var detail = "No active network connection."
        if (capabilities != null) {
            summary = "Connected"
            detail = when {
                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) -> "Connected via Wi-Fi"
                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) -> "Connected via Mobile Data"
                capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET) -> "Connected via Ethernet"
                else -> "Connected (Unknown Type)"
            }
        }
        // Check if item exists before updating, or add if it's the first time
        val existingIndex = statusItemsState.indexOfFirst { it.id == "network" }
        if (existingIndex != -1) {
            updateStatusItem("network", summary, detail)
        } else {
            statusItemsState.add(StatusItem("network", "Network Status", summary, detail))
        }
    }
    @RequiresPermission(Manifest.permission.ACCESS_NETWORK_STATE)
    private fun addNetworkStatus() { // Called once during initial load
        // Add a placeholder or initial state; updateNetworkStatusData will refresh it in onResume
        statusItemsState.add(StatusItem("network", "Network Status", "Checking...", "Checking network..."))
        updateNetworkStatusData() // Call it to get initial state
    }


    @SuppressLint("QueryPermissionsNeeded")
    private fun addInstalledApplicationsInfo() {
        val pm: PackageManager = packageManager
        val packages: List<ApplicationInfo> = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            try { pm.getInstalledApplications(PackageManager.MATCH_ALL) } catch (e: Exception) { listOf() }
        } else {
            @Suppress("DEPRECATION")
            try { pm.getInstalledApplications(PackageManager.GET_META_DATA) } catch (e: Exception) { listOf() }
        }

        val appCount = packages.size
        val summary = "$appCount apps installed"
        val initialDetail = "Loading app list..."
        statusItemsState.add(StatusItem("apps", "Installed Applications", summary, initialDetail))

        // Use LaunchedEffect from a Composable or a coroutine scope tied to Activity lifecycle for background tasks
        // For simplicity here, still using a Thread, but in a real app, use coroutines.
        Thread {
            val appDetailsList = StringBuilder()
            // Optionally filter system apps:
            // val userApps = packages.filter { (it.flags and ApplicationInfo.FLAG_SYSTEM) == 0 }
            packages.take(100).forEachIndexed { index, appInfo -> // Limiting to 100 for performance in this example
                val appName = try { appInfo.loadLabel(pm).toString() } catch (e: Exception) { appInfo.packageName }
                val packageName = appInfo.packageName
                appDetailsList.append("${index + 1}. $appName ($packageName)\n")
            }
            runOnUiThread { // Ensure UI updates are on the main thread
                updateStatusItemDetail("apps", if (appDetailsList.isNotEmpty()) appDetailsList.toString().trim() else "No applications found or permission issue.")
            }
        }.start()
    }
}

// Preview for your main screen (optional, but helpful)
@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    AndroidPhoneStatusComposeTheme {
        PhoneStatusScreen(
            statusItems = listOf(
                StatusItem("1", "Device Info", "Pixel Demo", "Detail text here", isExpanded = false),
                StatusItem("2", "Battery", "75%", "Charging", isExpanded = true)
            ),
            onItemClick = {}
        )
    }
}